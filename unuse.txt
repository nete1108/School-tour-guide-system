// var center = [47, 47];
    // var offsetRange = 10;
    // var offsetX = Math.random() * offsetRange * 2 - offsetRange; // 生成 x 方向的偏移量
    // var offsetY = Math.random() * offsetRange * 2 - offsetRange; // 生成 y 方向的偏移量

    // var newPoint = [center[0] + offsetX, center[1] + offsetY];
    // var new_marker = L.marker(newPoint, { draggable: true }).addTo(map);

    // var customIcon = L.divIcon({
    // className: 'custom-div-icon',
    // html: "<div>nete</div>",
    // iconSize: [100, 40],  // 调整图标大小
    // iconAnchor: [,]  // 调整图标锚点
    // });

    // var marker_with_text = L.marker(newPoint, {
    // icon: customIcon,
    // interactive: false  // 防止覆盖默认标记的交互
    // }).addTo(map);

    // var markerGroup = L.layerGroup([new_marker, marker_with_text]);
    // markerGroup.addTo(map);











    // // 开始拖动
    // function startDrag(e) {
    //   isDragging = true;
    //   offsetX = e.clientX - document.getElementById('myModal').getBoundingClientRect().left;
    //   offsetY = e.clientY - document.getElementById('myModal').getBoundingClientRect().top;
    //   document.addEventListener('mousemove', drag);
    //   document.addEventListener('mouseup', stopDrag);
    // }

    // // 拖动
    // function drag(e) {
    //   if (isDragging) {
    //     document.getElementById('myModal').style.left = e.clientX - offsetX + 'px';
    //     document.getElementById('myModal').style.top = e.clientY - offsetY + 'px';
    //   }
    // }

    // // 停止拖动
    // function stopDrag() {
    //   isDragging = false;
    //   document.removeEventListener('mousemove', drag);
    //   document.removeEventListener('mouseup', stopDrag);
    // }














    var Queue = function(){
    var items = []

    //入队
    this.enqueue = function(element){
        items.push(element)
    }

    // 出队
    this.dequeue = function(){
        return items.shift()
    }

    // 查看队列头
    this.front = function(){
        return items[0]
    }

    // 检查队列是否为空
    this.isEmpty = function(){
        return items.length ===0
    }

    // 队列大小
    this.size = function(){
        return items.length
    }
}



// 封装地图类（邻接表）/////////////////////////////////////////////////
var Graph = function(){
    // 存储顶点
    var vertices = [];


    // 存储边
    var edges = {};

    // 添加顶点
    this.addVertex = function(v){
        vertices.push(v);
        edges[v] = [];
    }

    // // 添加边
    // this.addEdge = function(start_point,end_point,weight){
    //     edges[start_point].push({ vertex: end_point, weight: weight });
    //     edges[end_point].push({ vertex: start_point, weight: weight });
    // }

    this.addEdge = function(start_point,end_point){
        edges[start_point].push(end_point)
        edges[end_point].push(start_point)
    }

    // 输出图的顶点和边(测试用)
    // this.printGraph = function(){
    //     for(var i=0;i<vertices.length;i++){
    //         var vertex = vertices[i];
    //         var edgeString = "";
    //         for (var j = 0; j < edges[vertex].length; j++) {
    //             edgeString += edges[vertex][j].vertex + "(" + edges[vertex][j].weight + ") ";
    //         }
    //         console.log(vertex + " -> " + edgeString);
    //     }
    // }


    this.printGraph = function(){
        for(var i=0;i<vertices.length;i++){
            var vertex = vertices[i];
            var edgeString = "";
            for (var j = 0; j < edges[vertex].length; j++) {
                edgeString += edges[vertex][j] + " " ;
            }
            console.log(vertex + " -> " + edgeString);
        }
    }


    // white 未发现
    // grey 已发现未探索
    // black 已探索

    //
    var initColor = function(){
        var color = {}
        for(var i=0;i<vertices.length;i++){
            color[vertices[i]] = 'white'
        }
        return color;
    }


    this.bfs = function(v,callback){
        // 初始化所有点为白色，即未发现
        var color = initColor();
        // 创建一个队列
        var queue = new Queue
        // 将输入的点入队
        queue.enqueue(v);

        // 循环,当队列不为空时
        while(!queue.isEmpty()){
            var now = queue.dequeue()
            var bian = edges[now];
            for(var i=0;i<bian.length;i++){
                var w = bian[i];
                if(color[w] === 'white'){
                    color[w] = 'grey'
                    queue.enqueue(w)
                }
            }
            color[now] = 'black'
            if(callback){
                callback(now);
            }
        }
    }
}
//////////////////////////////////////////////////////////////////////

var g = new Graph
g.addVertex('A')
g.addVertex('B')
g.addVertex('C')
g.addVertex('D')
g.addVertex('E')
g.addVertex('F')

g.addEdge('A','B')
g.addEdge('A','C')
g.addEdge('A','D')
g.addEdge('C','D')
g.addEdge('B','E')
g.addEdge('B','F')

g.printGraph()










// // 初始化整个地图
// var map = L.map('map', {
//     attributionControl: false,
//     // maxBounds: L.latLngBounds([112.16175, 112.40661], [29.16175, 199]),
// }).setView([47, 47], 10);


// window.onload = function(){
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_graphs",
//         type:"get",
//         contentType:"application/json",
//         success:function(result){
//             var selectElement = document.getElementById("graph_name");
//             selectElement.innerHTML = "";
//             for (var i = 0; i < result.length; i++) {
//                 var optionElement = document.createElement("option");
//                 optionElement.value = result[i].graph_name;  // 假设数据是字符串类型，直接作为值
//                 optionElement.text = result[i].graph_name;   // 设置显示文本
//                 selectElement.appendChild(optionElement);  // 添加到下拉框
//               }
//         },
//         error:function (error) {
//             console.error(error);
//         }
//     });
// }

// function show_map(){
//     map.eachLayer(function(layer) {
//         if (layer instanceof L.Marker || layer instanceof L.Polyline) {
//           map.removeLayer(layer);
//         }
//       });
//     var graph_name = $("#graph_name").val();
//     graph_name = graph_name.toString();
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_map",
//         type:"post",
//         contentType:"application/json",
//         data:JSON.stringify({
//             'graph_name':graph_name
//         }),
//         success:function(result){
//             // 添加点
//             for(var i=0;i<result.point.length;i++){
//                 var position = [result.point[i].x, result.point[i].y];
//                 var marker = L.marker(position, { draggable: true });
//                 var customIcon = L.divIcon({
//                     className: 'custom-div-icon',
//                     html: "<div>"+result.point[i].point+"</div>",
//                     iconSize: [100, 40],
//                     iconAnchor: [,]
//                 });
//                 var marker_with_text = L.marker(position, {
//                     icon: customIcon,
//                     interactive: false
//                 });
//                 var markerGroup = L.layerGroup([marker, marker_with_text]);
//                 markerGroup.addTo(map);
//             }
//             //添加边
//             for(var j=0;j<result.edge.length;j++){
//                 var position_start_point = [];
//                 var position_end_point = [];
//                 for(var k=0;k<result.point.length;k++){
//                     if(result.edge[j].start_point==result.point[k].point){
//                         position_start_point = [result.point[k].x,result.point[k].y];
//                     }
//                     if(result.edge[j].end_point==result.point[k].point){
//                         position_end_point = [result.point[k].x,result.point[k].y];
//                     }
//                 }
//                 var polyline = L.polyline([position_start_point, position_end_point], { color: 'blue' });

//                 var midPoint = [(position_start_point[0] + position_end_point[0]) / 2, (position_start_point[1] + position_end_point[1]) / 2];
//                 var customIcon = L.divIcon({
//                     className: 'custom-div-icon',
//                     html: "<div style='color: red;'>" + result.edge[j].weight + "</div>",
//                     iconSize: [100, 40],
//                     iconAnchor: [,]
//                 });
//                 var marker_weight = L.marker(midPoint, { icon: customIcon }).addTo(map);
//                 var Linegroup = L.layerGroup([polyline,marker_weight]).addTo(map);
//             }
//         },
//         error:function (error) {
//             console.error(error);
//           }
//     });
// }

// // 封装队列类/////////////////////////////////////////////////////////////////////////
// var Queue = function(){
//     var items = []

//     //入队
//     this.enqueue = function(element){
//         items.push(element)
//     }

//     // 出队
//     this.dequeue = function(){
//         return items.shift()
//     }

//     // 查看队列头
//     this.front = function(){
//         return items[0]
//     }

//     // 检查队列是否为空
//     this.isEmpty = function(){
//         return items.length ===0
//     }

//     // 队列大小
//     this.size = function(){
//         return items.length
//     }
// }

// // 封装地图类（邻接表）////////////////////////////////////////////////////////////////////
// var Graph = function(){
//     // 存储顶点
//     var vertices = [];


//     // 存储边
//     var edges = {};

//     // 添加顶点
//     this.addVertex = function(v){
//         vertices.push(v);
//         edges[v] = [];
//     }

//     // 添加边
//     this.addEdge = function(start_point,end_point,weight){
//         edges[start_point].push({ vertex: end_point, weight: weight });
//         edges[end_point].push({ vertex: start_point, weight: weight });
//     }


//     // 输出图的顶点和边(测试用)
//     this.printGraph = function(){
//         for(var i=0;i<vertices.length;i++){
//             var vertex = vertices[i];
//             var edgeString = "";
//             for (var j = 0; j < edges[vertex].length; j++) {
//                 edgeString += edges[vertex][j].vertex + "(" + edges[vertex][j].weight + ") ";
//             }
//             console.log(vertex + " -> " + edgeString);
//         }
//     }

//     this.dijkstra = function(startNode) {
//         var distances = {};
//         var visited = {};
//         var queue = new Queue();

//         // 初始化距离为无穷大，起点的距离为0
//         for (var i = 0; i < vertices.length; i++) {
//             var vertex = vertices[i];
//             distances[vertex] = Infinity;
//             visited[vertex] = false;
//         }
//         distances[startNode] = 0;

//         // 将起点加入队列
//         queue.enqueue(startNode);

//         while (!queue.isEmpty()) {
//             var current = queue.dequeue();

//             if (visited[current]) continue;

//             visited[current] = true;

//             for (var j = 0; j < edges[current].length; j++) {
//                 var neighbor = edges[current][j];
//                 var newDistance = distances[current] + neighbor.weight;

//                 if (newDistance < distances[neighbor.vertex]) {
//                     distances[neighbor.vertex] = newDistance;
//                     queue.enqueue(neighbor.vertex);
//                 }
//             }
//         }

//         return distances;
//     }


// }
// //////////////////////////////////////////////////////////////////////
// var g = new Graph


// // var startNode = prompt("请输入起点节点:");
// // var result = graph.dijkstra(startNode);

// // console.log(`从节点 ${startNode} 到其他节点的最短距离:`);
// // for (var node in result) {
// //     console.log(`${node}: ${result[node]}`);
// // }


// function show_lowest_path(){
//     var graph_name = $("#graph_name").val();
//     var start_point = $("#start_point").val();
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_map",
//         type:"post",
//         contentType:"application/json",
//         data:JSON.stringify({
//             'graph_name':graph_name
//         }),
//         success:function(result){
//             // 将数据导入到邻接表中
//             for(var i=0;i<result.point.length;i++){
//                 g.addVertex(result.point[i].point);
//             }
//             // 将数据导入到邻接表中
//             for(var j=0;j<result.edge.length;j++){
//                 g.addEdge(result.edge[j].start_point,result.edge[j].end_point,result.edge[j].weight);
//             }
//             g.printGraph()
//             var startNode = prompt("请输入起点节点:");
//             var result = g.dijkstra(startNode);

//             console.log(`从节点 ${startNode} 到其他节点的最短距离:`);
//             for (var node in result) {
//                 console.log(`${node}: ${result[node]}`);
//             }

//         },
//         error:function (error) {
//             console.error(error);
//           }
//     });
// }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// // 初始化整个地图
// var map = L.map('map', {
//     attributionControl: false,
//     // maxBounds: L.latLngBounds([112.16175, 112.40661], [29.16175, 199]),
// }).setView([47, 47], 10);


// window.onload = function(){
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_graphs",
//         type:"get",
//         contentType:"application/json",
//         success:function(result){
//             var selectElement = document.getElementById("graph_name");
//             selectElement.innerHTML = "";
//             for (var i = 0; i < result.length; i++) {
//                 var optionElement = document.createElement("option");
//                 optionElement.value = result[i].graph_name;  // 假设数据是字符串类型，直接作为值
//                 optionElement.text = result[i].graph_name;   // 设置显示文本
//                 selectElement.appendChild(optionElement);  // 添加到下拉框
//               }
//         },
//         error:function (error) {
//             console.error(error);
//         }
//     });
// }

// function show_map(){
//     map.eachLayer(function(layer) {
//         if (layer instanceof L.Marker || layer instanceof L.Polyline) {
//           map.removeLayer(layer);
//         }
//       });
//     var graph_name = $("#graph_name").val();
//     graph_name = graph_name.toString();
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_map",
//         type:"post",
//         contentType:"application/json",
//         data:JSON.stringify({
//             'graph_name':graph_name
//         }),
//         success:function(result){
//             // 添加点
//             for(var i=0;i<result.point.length;i++){
//                 var position = [result.point[i].x, result.point[i].y];
//                 var marker = L.marker(position, { draggable: true });
//                 var customIcon = L.divIcon({
//                     className: 'custom-div-icon',
//                     html: "<div>"+result.point[i].point+"</div>",
//                     iconSize: [100, 40],
//                     iconAnchor: [,]
//                 });
//                 var marker_with_text = L.marker(position, {
//                     icon: customIcon,
//                     interactive: false
//                 });
//                 var markerGroup = L.layerGroup([marker, marker_with_text]);
//                 markerGroup.addTo(map);
//             }
//             //添加边
//             for(var j=0;j<result.edge.length;j++){
//                 var position_start_point = [];
//                 var position_end_point = [];
//                 for(var k=0;k<result.point.length;k++){
//                     if(result.edge[j].start_point==result.point[k].point){
//                         position_start_point = [result.point[k].x,result.point[k].y];
//                     }
//                     if(result.edge[j].end_point==result.point[k].point){
//                         position_end_point = [result.point[k].x,result.point[k].y];
//                     }
//                 }
//                 var polyline = L.polyline([position_start_point, position_end_point], { color: 'blue' });

//                 var midPoint = [(position_start_point[0] + position_end_point[0]) / 2, (position_start_point[1] + position_end_point[1]) / 2];
//                 var customIcon = L.divIcon({
//                     className: 'custom-div-icon',
//                     html: "<div style='color: red;'>" + result.edge[j].weight + "</div>",
//                     iconSize: [100, 40],
//                     iconAnchor: [,]
//                 });
//                 var marker_weight = L.marker(midPoint, { icon: customIcon }).addTo(map);
//                 var Linegroup = L.layerGroup([polyline,marker_weight]).addTo(map);
//             }
//         },
//         error:function (error) {
//             console.error(error);
//           }
//     });
// }

// // // 封装队列类/////////////////////////////////////////////////////////////////////////
// // var Queue = function(){
// //     var items = []

// //     //入队
// //     this.enqueue = function(element){
// //         items.push(element)
// //     }

// //     // 出队
// //     this.dequeue = function(){
// //         return items.shift()
// //     }

// //     // 查看队列头
// //     this.front = function(){
// //         return items[0]
// //     }

// //     // 检查队列是否为空
// //     this.isEmpty = function(){
// //         return items.length ===0
// //     }

// //     // 队列大小
// //     this.size = function(){
// //         return items.length
// //     }
// // }

// // 封装地图类（邻接表）////////////////////////////////////////////////////////////////////
// var Graph = function(){
//     // 存储顶点
//     var vertices = [];


//     // 存储边
//     var edges = {};

//     // 添加顶点
//     this.addVertex = function(v){
//         vertices.push(v);
//         edges[v] = [];
//     }

//     // 添加边
//     this.addEdge = function(start_point,end_point,weight){
//         edges[start_point].push({ vertex: end_point, weight: weight });
//         edges[end_point].push({ vertex: start_point, weight: weight });
//     }


//     // 输出图的顶点和边(测试用)
//     this.printGraph = function(){
//         for(var i=0;i<vertices.length;i++){
//             var vertex = vertices[i];
//             var edgeString = "";
//             for (var j = 0; j < edges[vertex].length; j++) {
//                 edgeString += edges[vertex][j].vertex + "(" + edges[vertex][j].weight + ") ";
//             }
//             console.log(vertex + " -> " + edgeString);
//         }
//     }

//     this.shortestPath = function (start_point,end_point) {
//         var distances = {};
//         var shortestPaths = {};
//         vertices.forEach(function (vertex) {
//             distances[vertex] = Infinity;
//         });
//         distances[start_point] = 0;

//         var queue = new Queue();
//         queue.enqueue(start_point);

//         while (!queue.isEmpty()) {
//             var currentVertex = queue.dequeue();
//             var adjacentVertices = edges[currentVertex];

//             adjacentVertices.forEach(function (adjacent) {
//                 var distance = distances[currentVertex] + adjacent.weight;
//                 if (distance < distances[adjacent.vertex]) {
//                     distances[adjacent.vertex] = distance;
//                     shortestPaths[adjacent.vertex] = shortestPaths[currentVertex] ? shortestPaths[currentVertex] + ' -> ' + adjacent.vertex : start_point + ' -> ' + adjacent.vertex;
//                     queue.enqueue(adjacent.vertex);
//                 }
//             });
//         }

//         for (var vertex in shortestPaths) {
//             if (vertex !== start_point) {
//                 console.log('从 ' + start_point + ' 到 ' + vertex + '的最短路径为: ' + shortestPaths[vertex] + ', 最短路径长为: ' + distances[vertex]);
//             }
//         }

//     };


// }
// //////////////////////////////////////////////////////////////////////
// var g = new Graph

// function show_lowest_path(){
//     var graph_name = $("#graph_name").val();
//     // var start_point = $("#start_point").val();
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_map",
//         type:"post",
//         contentType:"application/json",
//         data:JSON.stringify({
//             'graph_name':graph_name
//         }),
//         success:function(result){
//             // 将数据导入到邻接表中
//             for(var i=0;i<result.point.length;i++){
//                 g.addVertex(result.point[i].point);
//             }
//             // 将数据导入到邻接表中
//             for(var j=0;j<result.edge.length;j++){
//                 g.addEdge(result.edge[j].start_point,result.edge[j].end_point,result.edge[j].weight);
//             }
//             g.printGraph()
//             var start_point = "学校大门";
//             g.shortestPath(start_point,end_point);

//         },
//         error:function (error) {
//             console.error(error);
//           }
//     });
// }








// 初始化整个地图////////////////////////////////////////////////////////////////
// var map = L.map('map', {
//     attributionControl: false,
//     // maxBounds: L.latLngBounds([112.16175, 112.40661], [29.16175, 199]),
// }).setView([47, 47], 10);


// window.onload = function(){
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_graphs",
//         type:"get",
//         contentType:"application/json",
//         success:function(result){
//             var selectElement = document.getElementById("graph_name");
//             selectElement.innerHTML = "";
//             for (var i = 0; i < result.length; i++) {
//                 var optionElement = document.createElement("option");
//                 optionElement.value = result[i].graph_name;  // 假设数据是字符串类型，直接作为值
//                 optionElement.text = result[i].graph_name;   // 设置显示文本
//                 selectElement.appendChild(optionElement);  // 添加到下拉框
//               }
//         },
//         error:function (error) {
//             console.error(error);
//         }
//     });
// }

// function show_map(){
//     map.eachLayer(function(layer) {
//         if (layer instanceof L.Marker || layer instanceof L.Polyline) {
//           map.removeLayer(layer);
//         }
//       });
//     var graph_name = $("#graph_name").val();
//     graph_name = graph_name.toString();
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_map",
//         type:"post",
//         contentType:"application/json",
//         data:JSON.stringify({
//             'graph_name':graph_name
//         }),
//         success:function(result){
//             // 添加点
//             for(var i=0;i<result.point.length;i++){
//                 var position = [result.point[i].x, result.point[i].y];
//                 var marker = L.marker(position, { draggable: true });
//                 var customIcon = L.divIcon({
//                     className: 'custom-div-icon',
//                     html: "<div>"+result.point[i].point+"</div>",
//                     iconSize: [100, 40],
//                     iconAnchor: [,]
//                 });
//                 var marker_with_text = L.marker(position, {
//                     icon: customIcon,
//                     interactive: false
//                 });
//                 var markerGroup = L.layerGroup([marker, marker_with_text]);
//                 markerGroup.addTo(map);
//             }
//             //添加边
//             for(var j=0;j<result.edge.length;j++){
//                 var position_start_point = [];
//                 var position_end_point = [];
//                 for(var k=0;k<result.point.length;k++){
//                     if(result.edge[j].start_point==result.point[k].point){
//                         position_start_point = [result.point[k].x,result.point[k].y];
//                     }
//                     if(result.edge[j].end_point==result.point[k].point){
//                         position_end_point = [result.point[k].x,result.point[k].y];
//                     }
//                 }
//                 var polyline = L.polyline([position_start_point, position_end_point], { color: 'blue' });

//                 var midPoint = [(position_start_point[0] + position_end_point[0]) / 2, (position_start_point[1] + position_end_point[1]) / 2];
//                 var customIcon = L.divIcon({
//                     className: 'custom-div-icon',
//                     html: "<div style='color: red;'>" + result.edge[j].weight + "</div>",
//                     iconSize: [100, 40],
//                     iconAnchor: [,]
//                 });
//                 var marker_weight = L.marker(midPoint, { icon: customIcon }).addTo(map);
//                 var Linegroup = L.layerGroup([polyline,marker_weight]).addTo(map);
//             }
//         },
//         error:function (error) {
//             console.error(error);
//           }
//     });
// }

// // 封装地图类（邻接表）////////////////////////////////////////////////////////////////////
// var Graph = function(){
//     // 存储顶点
//     var vertices = [];


//     // 存储边
//     var edges = {};

//     // 添加顶点
//     this.addVertex = function(v){
//         vertices.push(v);
//         edges[v] = [];
//     }

//     // 添加边
//     this.addEdge = function(start_point,end_point,weight){
//         edges[start_point].push({ vertex: end_point, weight: weight });
//         edges[end_point].push({ vertex: start_point, weight: weight });
//     }


//     // 输出图的顶点和边(测试用)
//     this.printGraph = function(){
//         for(var i=0;i<vertices.length;i++){
//             var vertex = vertices[i];
//             var edgeString = "";
//             for (var j = 0; j < edges[vertex].length; j++) {
//                 edgeString += edges[vertex][j].vertex + "(" + edges[vertex][j].weight + ") ";
//             }
//             console.log(vertex + " -> " + edgeString);
//         }
//     }


//     this.dijkstra = funvtion(start_point){
//         var dist = [];
//         var path = [];
//         var T = [];
//         var S = [];

//         // 初始化工作
//         for(var i=0;i<vertices.length;i++){
//             dist.push(Infinity);
//             path.push(-1);
//             T.push(1);
//             S.push(0);
//         }
//         var u = star

//     }



// }
// //////////////////////////////////////////////////////////////////////
// var g = new Graph

// function show_lowest_path(){
//     var graph_name = $("#graph_name").val();
//     // var start_point = $("#start_point").val();
//     $.ajax({
//         url:"http://127.0.0.1:12348/get_all_map",
//         type:"post",
//         contentType:"application/json",
//         data:JSON.stringify({
//             'graph_name':graph_name
//         }),
//         success:function(result){
//             // 将数据导入到邻接表中
//             for(var i=0;i<result.point.length;i++){
//                 g.addVertex(result.point[i].point);
//             }
//             // 将数据导入到邻接表中
//             for(var j=0;j<result.edge.length;j++){
//                 g.addEdge(result.edge[j].start_point,result.edge[j].end_point,result.edge[j].weight);
//             }
//             g.printGraph()
//             var startVertex = "学校大门"
//             // var all_datas = g.dijkstra(startVertex);
            

//         },
//         error:function (error) {
//             console.error(error);
//           }
//     });
// }